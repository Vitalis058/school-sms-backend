
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  username: 'username',
  firstName: 'firstName',
  lastName: 'lastName',
  image: 'image',
  password: 'password',
  isActive: 'isActive',
  lastLogin: 'lastLogin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  role: 'role'
};

exports.Prisma.StudentScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  dateOfBirth: 'dateOfBirth',
  gender: 'gender',
  guardianId: 'guardianId',
  email: 'email',
  phoneNumber: 'phoneNumber',
  streetAddress: 'streetAddress',
  city: 'city',
  state: 'state',
  zipCode: 'zipCode',
  admissionNumber: 'admissionNumber',
  enrollmentDate: 'enrollmentDate',
  password: 'password',
  gradeId: 'gradeId',
  streamId: 'streamId',
  message: 'message',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TeacherScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  dateOfBirth: 'dateOfBirth',
  gender: 'gender',
  email: 'email',
  phone: 'phone',
  alternatePhone: 'alternatePhone',
  address: 'address',
  city: 'city',
  state: 'state',
  zipCode: 'zipCode',
  emergencyContactName: 'emergencyContactName',
  emergencyContactPhone: 'emergencyContactPhone',
  emergencyContactRelationship: 'emergencyContactRelationship',
  highestQualification: 'highestQualification',
  specialization: 'specialization',
  teachingExperience: 'teachingExperience',
  gradesCanTeach: 'gradesCanTeach',
  employmentType: 'employmentType',
  joiningDate: 'joiningDate',
  position: 'position',
  previousEmployments: 'previousEmployments',
  certifications: 'certifications',
  skills: 'skills',
  languages: 'languages',
  additionalNotes: 'additionalNotes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  departmentId: 'departmentId'
};

exports.Prisma.GuardianScalarFieldEnum = {
  id: 'id',
  name: 'name',
  relationship: 'relationship',
  phone: 'phone',
  email: 'email',
  address: 'address',
  occupation: 'occupation',
  dateOfBirth: 'dateOfBirth',
  educationLevel: 'educationLevel',
  preferredContactMethod: 'preferredContactMethod',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StreamScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  gradeId: 'gradeId',
  teacherId: 'teacherId'
};

exports.Prisma.GradeScalarFieldEnum = {
  id: 'id',
  slug: 'slug',
  name: 'name'
};

exports.Prisma.DepartmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubjectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  subjectCode: 'subjectCode',
  shortname: 'shortname',
  departmentId: 'departmentId',
  active: 'active',
  optional: 'optional',
  fieldtrips: 'fieldtrips',
  labRequired: 'labRequired',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LessonScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  day: 'day',
  teacherId: 'teacherId',
  subjectId: 'subjectId',
  streamId: 'streamId',
  timeSlotId: 'timeSlotId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TimeSlotScalarFieldEnum = {
  id: 'id',
  startTime: 'startTime',
  endTime: 'endTime',
  name: 'name'
};

exports.Prisma.LeaveRequestScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  leaveType: 'leaveType',
  startDate: 'startDate',
  endDate: 'endDate',
  reason: 'reason',
  status: 'status',
  appliedDate: 'appliedDate',
  approvedBy: 'approvedBy',
  approvedDate: 'approvedDate',
  rejectionReason: 'rejectionReason',
  attachments: 'attachments',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AnnouncementScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  type: 'type',
  priority: 'priority',
  targetAudience: 'targetAudience',
  isActive: 'isActive',
  publishDate: 'publishDate',
  expiryDate: 'expiryDate',
  createdBy: 'createdBy',
  attachments: 'attachments',
  readBy: 'readBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DriverScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phone: 'phone',
  licenseNumber: 'licenseNumber',
  licenseExpiry: 'licenseExpiry',
  dateOfBirth: 'dateOfBirth',
  address: 'address',
  emergencyContact: 'emergencyContact',
  emergencyPhone: 'emergencyPhone',
  hireDate: 'hireDate',
  status: 'status',
  experience: 'experience',
  image: 'image',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VehicleScalarFieldEnum = {
  id: 'id',
  make: 'make',
  model: 'model',
  year: 'year',
  plateNumber: 'plateNumber',
  vin: 'vin',
  color: 'color',
  fuelType: 'fuelType',
  capacity: 'capacity',
  mileage: 'mileage',
  lastServiceDate: 'lastServiceDate',
  nextServiceDate: 'nextServiceDate',
  insuranceExpiry: 'insuranceExpiry',
  registrationExpiry: 'registrationExpiry',
  status: 'status',
  driverId: 'driverId',
  purchaseDate: 'purchaseDate',
  purchasePrice: 'purchasePrice',
  currentValue: 'currentValue',
  image: 'image',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VehicleBookingScalarFieldEnum = {
  id: 'id',
  vehicleId: 'vehicleId',
  driverId: 'driverId',
  requestedBy: 'requestedBy',
  purpose: 'purpose',
  destination: 'destination',
  startDate: 'startDate',
  endDate: 'endDate',
  startTime: 'startTime',
  endTime: 'endTime',
  passengers: 'passengers',
  status: 'status',
  approvedBy: 'approvedBy',
  approvalDate: 'approvalDate',
  notes: 'notes',
  mileageStart: 'mileageStart',
  mileageEnd: 'mileageEnd',
  fuelUsed: 'fuelUsed',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MaintenanceReportScalarFieldEnum = {
  id: 'id',
  vehicleId: 'vehicleId',
  driverId: 'driverId',
  type: 'type',
  title: 'title',
  description: 'description',
  serviceDate: 'serviceDate',
  cost: 'cost',
  serviceProvider: 'serviceProvider',
  mileageAtService: 'mileageAtService',
  nextServiceDue: 'nextServiceDue',
  partsReplaced: 'partsReplaced',
  status: 'status',
  priority: 'priority',
  attachments: 'attachments',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SystemSettingsScalarFieldEnum = {
  id: 'id',
  category: 'category',
  settings: 'settings',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SystemLogScalarFieldEnum = {
  id: 'id',
  level: 'level',
  category: 'category',
  message: 'message',
  details: 'details',
  timestamp: 'timestamp'
};

exports.Prisma.SystemHealthScalarFieldEnum = {
  id: 'id',
  status: 'status',
  uptime: 'uptime',
  memoryUsage: 'memoryUsage',
  databaseStatus: 'databaseStatus',
  serviceStatuses: 'serviceStatuses',
  lastBackup: 'lastBackup',
  maintenanceMode: 'maintenanceMode',
  systemVersion: 'systemVersion',
  timestamp: 'timestamp'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = exports.$Enums.Role = {
  ADMIN: 'ADMIN',
  TEACHER: 'TEACHER',
  STUDENT: 'STUDENT',
  STAFF: 'STAFF',
  DRIVER: 'DRIVER'
};

exports.Gender = exports.$Enums.Gender = {
  male: 'male',
  female: 'female',
  other: 'other'
};

exports.EmploymentType = exports.$Enums.EmploymentType = {
  full_time: 'full_time',
  part_time: 'part_time',
  contract: 'contract'
};

exports.ContactMethod = exports.$Enums.ContactMethod = {
  phone: 'phone',
  email: 'email',
  both: 'both'
};

exports.LeaveType = exports.$Enums.LeaveType = {
  SICK: 'SICK',
  ANNUAL: 'ANNUAL',
  PERSONAL: 'PERSONAL',
  MATERNITY: 'MATERNITY',
  PATERNITY: 'PATERNITY',
  EMERGENCY: 'EMERGENCY'
};

exports.LeaveStatus = exports.$Enums.LeaveStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.DriverStatus = exports.$Enums.DriverStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  ON_LEAVE: 'ON_LEAVE',
  SUSPENDED: 'SUSPENDED'
};

exports.FuelType = exports.$Enums.FuelType = {
  PETROL: 'PETROL',
  DIESEL: 'DIESEL',
  ELECTRIC: 'ELECTRIC',
  HYBRID: 'HYBRID'
};

exports.VehicleStatus = exports.$Enums.VehicleStatus = {
  AVAILABLE: 'AVAILABLE',
  IN_USE: 'IN_USE',
  MAINTENANCE: 'MAINTENANCE',
  OUT_OF_SERVICE: 'OUT_OF_SERVICE'
};

exports.BookingStatus = exports.$Enums.BookingStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.MaintenanceType = exports.$Enums.MaintenanceType = {
  ROUTINE: 'ROUTINE',
  REPAIR: 'REPAIR',
  INSPECTION: 'INSPECTION',
  EMERGENCY: 'EMERGENCY'
};

exports.MaintenanceStatus = exports.$Enums.MaintenanceStatus = {
  SCHEDULED: 'SCHEDULED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.Priority = exports.$Enums.Priority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.Prisma.ModelName = {
  User: 'User',
  Student: 'Student',
  Teacher: 'Teacher',
  Guardian: 'Guardian',
  Stream: 'Stream',
  Grade: 'Grade',
  Department: 'Department',
  Subject: 'Subject',
  Lesson: 'Lesson',
  TimeSlot: 'TimeSlot',
  LeaveRequest: 'LeaveRequest',
  Announcement: 'Announcement',
  Driver: 'Driver',
  Vehicle: 'Vehicle',
  VehicleBooking: 'VehicleBooking',
  MaintenanceReport: 'MaintenanceReport',
  SystemSettings: 'SystemSettings',
  SystemLog: 'SystemLog',
  SystemHealth: 'SystemHealth'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
