generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  username  String   @unique
  image     String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  role      Role     @default(STUDENT)

  @@map("user")
}

model Student {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  dateOfBirth String
  gender      String
  Guardian    Guardian @relation(fields: [guardianId], references: [id])
  guardianId  String

  // Contact Info
  email       String? @unique
  phoneNumber String?

  // Address Info
  streetAddress String
  city          String
  state         String
  zipCode       String?

  // Academic Info
  admissionNumber String @unique
  enrollmentDate  String
  password        String

  // grade stream Info
  gradeId  String
  Grade    Grade  @relation(fields: [gradeId], references: [id])
  streamId String
  Stream   Stream @relation(fields: [streamId], references: [id])

  message   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Teacher {
  id             String   @id @default(uuid())
  firstName      String
  lastName       String
  dateOfBirth    DateTime
  gender         Gender
  email          String   @unique
  phone          String
  alternatePhone String?
  address        String
  city           String
  state          String
  zipCode        String

  // Emergency Contact
  emergencyContactName         String
  emergencyContactPhone        String
  emergencyContactRelationship String

  // Professional Information
  highestQualification String
  specialization       String
  teachingExperience   String
  gradesCanTeach       String[]

  // Employment Details
  employmentType EmploymentType
  joiningDate    DateTime
  position       String
  department     String

  // Previous Employment
  previousEmployments Json

  // Additional Information
  certifications  String?
  skills          String?
  languages       String?
  additionalNotes String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Stream    Stream?

  Department   Department? @relation(fields: [departmentId], references: [id])
  departmentId String?

  subjects Subject[]
  Lesson   Lesson[]
}

model Guardian {
  id                     String        @id @default(uuid())
  name                   String
  relationship           String
  phone                  String
  email                  String?       @unique
  address                String
  occupation             String?
  dateOfBirth            DateTime?
  educationLevel         String?
  preferredContactMethod ContactMethod @default(both)
  notes                  String?
  students               Student[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Stream {
  id        String    @id @default(cuid())
  name      String    @unique()
  slug      String
  Grade     Grade     @relation(fields: [gradeId], references: [id])
  gradeId   String
  teacherId String?   @unique()
  Teacher   Teacher?  @relation(fields: [teacherId], references: [id])
  students  Student[]
  Lesson    Lesson[]
}

model Grade {
  id       String    @id @default(cuid())
  slug     String
  name     String    @unique
  streams  Stream[]
  students Student[]
}

model Department {
  id          String    @id @default(cuid())
  name        String
  slug        String
  description String?
  teachers    Teacher[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  subjects    Subject[]
}

model Subject {
  id          String @id @default(cuid())
  name        String @unique()
  slug        String
  subjectCode String @unique()
  shortname   String

  teachers Teacher[]

  Department   Department @relation(fields: [departmentId], references: [id])
  departmentId String

  active      Boolean @default(true)
  optional    Boolean @default(false)
  fieldtrips  Boolean @default(false)
  labRequired Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Lesson    Lesson[]
}

model Lesson {
  id          String @id @default(cuid())
  name        String
  description String
  materials   Json?
  assignment  Json?
  day         Int

  teacherId String
  Teacher   Teacher @relation(fields: [teacherId], references: [id])

  subjectId String
  Subject   Subject @relation(fields: [subjectId], references: [id])

  streamId String
  Stream   Stream @relation(fields: [streamId], references: [id])

  timeSlotId String
  TimeSlot   TimeSlot @relation(fields: [timeSlotId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TimeSlot {
  id        String   @id @default(uuid())
  startTime DateTime
  endTime   DateTime
  name      String
  lessons   Lesson[]

  @@unique([startTime, endTime])
  @@map("time_slot")
}

enum ContactMethod {
  phone
  email
  both
}

enum Gender {
  male
  female
  other
}

enum EmploymentType {
  full_time
  part_time
  contract
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
  STAFF
}
